{"padTitle":"Bridge",
"positions":{"map":{"__map":true,
"values":[["1",{"height":2045.2168571270815,
"id":"1",
"type":"resize",
"width":845.5940748732971,
"x":-1950.0952492796307,
"y":-1075.113683311747}],["18",{"height":1867.8569345417866,
"id":"18",
"type":"move",
"width":984.3565734053251,
"x":-21.782531248348075,
"y":-1084.5418612971857}],["53",{"height":767.9455806252175,
"id":"53",
"type":"move",
"width":734.716050301518,
"x":-956.9950298533001,
"y":-1083.3127022167046}],["66",{"height":1324.3370259903083,
"id":"66",
"type":"resize",
"width":759.7127836659954,
"x":-956.869209018501,
"y":-181.29392986185817}]]}},
"titles":{"map":{"__map":true,
"values":[["1",{"id":"1",
"state":false,
"title":"Service Access"}],["18",{"id":"18",
"state":false,
"title":"App"}],["53",{"id":"53",
"state":false,
"title":"WAV"}],["66",{"id":"66",
"state":false,
"title":"Transcription and Translation"}]]}},
"version":2,
"windowEnabled":{"map":{"__map":true,
"values":[["53",{"enabled":true,
"id":"53"}],["1",{"enabled":true,
"id":"1"}],["18",{"enabled":true,
"id":"18"}],["66",{"enabled":true,
"id":"66"}]]}},
"windowTypes":{"map":{"__map":true,
"values":[["1","code"],["18","code"],["53","code"],["66","code"]]}},
"windows":["1","18","53","66"],
"zIndex":{"map":{"__map":true,
"values":[["1",104],["18",107],["53",106],["66",105]]}}}
{__codeMap: true, value: [[`1`, `const hostName = (() => {
    const maybeHost = new URL(window.top.location).searchParams.get("host");
    if (maybeHost) {
        return maybeHost;
    }
    return "/";
})();

const languages = ["eng", "en"];

const {toBase64} = import("./media/toBase64.js");
const {LocalMedia} = import("./media/localmedia.js");

const {reflect, sender} = import(\`./msg.js\`);

const msgindex = reflect(\`\${hostName}/substrate/v1/msgindex\`);
const msgSender = sender();
const sendmsg = (msg, data) => {
  return msgSender(msg, data).then((obj) => obj.data.returns);
}

const audioContext = Behaviors.collect(undefined, trigger, (old, _now) => {
    if (old === undefined) {
        return new window.AudioContext();
    }
    return old;
});

const trigger = Events.listener(document.querySelector("body"), "click", (evt) => evt);

const localMedia = new LocalMedia({
    videoSource: false,
    onstreamchange: (_stream) => {
    }
});

const streams = localMedia.setup();

const source = ((audioContext, localMedia, _streams) => {
    // console.log("in source", audioContext, localMedia);
    return new window.MediaStreamAudioSourceNode(audioContext, {mediaStream: localMedia.stream})
})(audioContext, localMedia, streams);

const processor = ((audioContext) => {
    return audioContext.audioWorklet.addModule(\`./media/audio-samples.js\`).then(() => {
        const worklet = new window.AudioWorkletNode(audioContext, "processor");
        worklet.addEventListener("processorerror", console.log);
        return worklet;
    })
})(audioContext);

const inputs = Events.observe((notifier) => {
    processor.port.onmessage = (event) => {
        notifier(event.data);
    }
    source.connect(processor);
    return () => source.disconnect(processor);
}, {queued: true});

const voiceChunk = Events.receiver();

console.log("voiceChunk", voiceChunk);

const _speaking = Behaviors.collect({time: 0, data: [], speaking: false}, _inputs, ((old, current) => {
    const max = Math.max(...current.map((c) => c.max));
    const currentTime = current[current.length - 1].currentTime;
    const newInput = current.map((c) => c.input);

    if (old.speaking) {
        const newData = [...old.data, ...newInput];
        if (max < 0.01) {
            if (currentTime > old.time + 0.5) {
                // Events.send(voiceChunk, {time: currentTime, data: newData});
                return {time: currentTime, data: newData, speaking: false};
            }
            return {time: old.time, data: newData, speaking: old.speaking};
        }
        return {time: currentTime, data: newData, speaking: old.speaking};
    }

    if (max < 0.01) {
        return old;
    }

    return {time: currentTime, data: newInput, speaking: true};
}));

const fasterVoiceChunk = Events.receiver();

const listening = Behaviors.collect({time: 0, data: [], max: 0, over: false}, inputs, ((old, current) => {
    const max = Math.max(...current.map((c) => c.max));
    const currentTime = current[current.length - 1].currentTime;
    const newInput = current.map((c) => c.input).filter((input) => input);
    const newData = old.over ? [...newInput] : [...old.data, ...newInput];
    const newTime = old.over ? currentTime : old.time;
    const newMax = old.over ? max : Math.max(old.max, max);

    if (currentTime >= old.time + 1 && !old.over) {
        if (newMax < 0.01) {
          return {time: currentTime, data: [], max: 0, over: true};
        }
        Events.send(fasterVoiceChunk, {time: newTime, data: newData, max: newMax, over: true});
        return {time: newTime, data: newData, max: newMax, over: true};
    }
    return {time: newTime, data: newData, max: newMax, over: false};
}));


const listeningChunk = fasterVoiceChunk.over && fasterVoiceChunk.max > 0.01 ? fasterVoiceChunk : undefined;
console.log("listening", listeningChunk);`],
[`18`, `const {h, render, html} = import("./preact.standalone.module.js");

const style = (() => {
  const head = document.querySelector('head');
  const script = document.createElement('script');
  script.id = 'tailwindcss';
  script.src = 'https://cdn.tailwindcss.com';
  
  const promise = new Promise((resolve) => {
    script.onload = () => {
        const style = document.createElement("style");
        style.id = "pad-css";
        style.textContent = css;
        document.head.querySelector("#pad-css")?.remove();
        document.head.appendChild(style);
        resolve(style);
    };
    head.querySelector("#tailwindcss")?.remove();
    head.appendChild(script);
  });

  const css = \`
html, body {
height: 100%
}
\`;

  return promise;
})(sessionStart);

const sessionStart = Behaviors.keep(Events.once(Date.now()));

const speakersFor = () => ["unknown"];

const model = Behaviors.collect([], fasterTranscriptionWithId, (old, t) => {
  const transcribed = t.transcribed.data;
  const time = t.transcribed.time;
  const sentenceId = t.id;
  if (transcribed.segments.length === 0) {console.log("silent"); return old;}
  const now = {
    transcript: {fields: transcribed},
    translations: [],
    assistants: [],
    tools: [],
    speakers: speakersFor(),
    sentenceId
  };
  return [...old, now];
});

const Topbar = h('div', {"class":"flex flex-wrap px-6 py-4","id":"topbar"},
  sessionStart ? h("h1", {"class":"py-1 text-xl font-bold"},
    sessionStart.toLocaleString(),
  ) : null,
)

const Entry = (entry, translations) => {
  if (!entry.transcript || !entry.transcript.fields || !entry.transcript.fields || !entry.transcript.fields.segments) return null;
  const data = entry.transcript.fields;
  const track = [];
  const translation = translations.map.get(entry.sentenceId);
  const words = data.segments
    .flatMap((seg) => seg.words);
  return h('div', null,
    h("div", {"class": "text text-teal-500 space-x-4"}, entry.speakers.length == 0 ? "unknown" : entry.speakers.map(s => {
      return h("span", {"class": \`text-\${s.color}\`, "data-speaker-id": s.id}, s.name);
    })),
    h("div", {"class": \`text text-gray-400\`, lang: data.source_language},
      words.map(w => {
        const colors = speakersFor(track, w.start*1000, w.end*1000).map(s => s.color);
        return h('span', {
          "class": colors.length == 0 ? "" : \`underline decoration-\${colors[0]}/50\`,
        }, w.word)
      })
    ),
   translation ? h("div", {"class": "text text-cyan-500", lang: translation.lang},
        translation,
      ) : null,    
    entry.assistants.map(asst => {
      return h("div", {"class": "text text-fuchsia-500 whitespace-pre-wrap"},
        h('b', null, asst.name), ' ', asst.text,
      );
    }),
  );
}

// TODO add keyed entries
const Session = (model, translations, style) => { return h('div', null, model.map((e) => Entry(e, translations))) };

const App = h('div', {"class": "flex flex-row bg-gray-900 text-white antialiased"},
  h('div', {'class': 'flex flex-col h-screen grow'},
    Topbar,
    h('div', {"class":"grow px-6 mt-4 overflow-auto"},
      Session(model, translations),
    ),
  ),
)

render(
  App,
  document.querySelector('body'),
)`],
[`53`, `const {audioBufferToWav} = import("./media/wav.js");

const wav = ((voiceChunk) => {
    return {timelabel: voiceChunk.time, wav: chunkToWav(voiceChunk.data)};
})(voiceChunk);

const fasterWav = ((voiceChunk) => {
    console.log("fasterWav");
    return {timelabel: voiceChunk.time, wav: chunkToWav(voiceChunk.data)};
})(listeningChunk);

console.log("wav", wav);
console.log("fasterWav", fasterWav);

const chunkToWav = (data) => {
    const zip = (pairs) => {
        const length = pairs[0][0].length * pairs.length;
        const a = new Float32Array(length);
        const b = new Float32Array(length);
        let index = 0;
        for (let i = 0; i < pairs.length; i++) {
            a.set(pairs[i][0], index);
            b.set(pairs[i][1], index);
            index += pairs[i][0].length;
        }
        return [a, b];
    };
    return audioBufferToWav(44100, zip(data));
};

/*
  const saveWav = ((wav) => {
  let div = document.createElement("a");
  const blob = new Blob([wav.wav], {type: "audio/wav"});
  let fileURL = URL.createObjectURL(blob);
  div.setAttribute("href", fileURL);
  div.setAttribute("download", \`wav-\${Date.now()}.wav\`);
  div.click();
  })(wav);
*/
`],
[`66`, `const transcriber = (wav) => {
    const audio_data = toBase64(new Uint8Array(wav.wav));
    const audio_metadata = {mime_type: "audio/wav"};
    const task = "transcribe";
    const parameters = {audio_data, audio_metadata, task};
    const msg = msgindex['faster-whisper/transcribe-data'];
  console.log("transcriber", wav.timelabel)
    return {time: wav.timelabel, data: sendmsg(msg, {parameters})};
};

const translator = (request) => {
    const data = transcriptionWithId.transcribed.data;
    const words = data.segments.flatMap((seg) => seg.words);
    const parameters = {
      source_language: transcriptionWithId.transcribed.data.target_language,
      target_language: languages[0],
      text: words.map(w => w.word).join("")
    };
    const msg = msgindex['seamlessm4t/translate'];
  console.log("translator", request.transcribed.time);
    return {translated: sendmsg(msg, {parameters}), id: transcriptionWithId.id};
};

const translationRequest = (transcriptionWithId) => {
  if (!languages.includes(transcriptionWithId.transcribed.data.target_language)) {
      console.log(transcriptionWithId);
    return transcriptionWithId;
  }
  return;
}

const transcribedP = transcriber(wav);
const transcribed = Events.resolvePart(transcribedP);
const transcriptionId = Behaviors.collect(0, transcribed, (old, _new) => old + 1);
const transcriptionWithId = {transcribed, id: transcriptionId};
console.log("transcriptionWithId", transcriptionWithId);

const fasterTranscribedP = transcriber(fasterWav);
const fasterTranscribed = Events.resolvePart(fasterTranscribedP);
const fasterTranscriptionId = Behaviors.collect(0, fasterTranscribed, (old, _new) => old + 1);
const fasterTranscriptionWithId = {transcribed: fasterTranscribed, id: fasterTranscriptionId};
console.log("fasterTranscribed", fasterTranscribed);

const requestTranslation = translationRequest(transcriptionWithId);
const translatedP = translator(requestTranslation);
const translatedWithId = Events.resolvePart(translatedP);
console.log("translatedWithId", translatedWithId);

const requestFasterTranslation = translationRequest(fasterTranscriptionWithId);
const fasterTranslatedP = translator(requestFasterTranslation);
const fasterTranslatedWithId = Events.resolvePart(fasterTranslatedP);
console.log("fasterTranslatedWithId", fasterTranslatedWithId);

const translations = Behaviors.collect(
  {map: new Map()},
  translatedWithId, (old, translatedWithId) => {
      console.log("translatedWithId", translatedWithId);
      const text = translatedWithId.translated.segments.map((s => s.text)).join("");
      old.map.set(translatedWithId.id, text);
      return {map: old.map};
});

const fasterTranslations = Behaviors.collect(
  {map: new Map()},
  fasterTranslatedWithId, (old, translatedWithId) => {
      console.log("fasterTranslatedWithId", translatedWithId);
      const text = translatedWithId.translated.segments.map((s => s.text)).join("");
      old.map.set(translatedWithId.id, text);
      return {map: old.map};
});
`]]}